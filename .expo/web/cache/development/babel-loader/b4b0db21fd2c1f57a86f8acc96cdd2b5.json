{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport AsyncStorage from \"react-native-web/dist/exports/AsyncStorage\";\nvar KEY_ALERTS = \"KEY_ALERTS\";\n\nvar AlertStorageManager = function () {\n  function AlertStorageManager() {\n    _classCallCheck(this, AlertStorageManager);\n  }\n\n  _createClass(AlertStorageManager, [{\n    key: \"getItem\",\n    value: function getItem(key) {\n      var localDataStr = AsyncStorage.getItem(key).then(function (data) {\n        return data;\n      });\n      return localDataStr;\n    }\n  }, {\n    key: \"setItem\",\n    value: function setItem(key, value) {\n      try {\n        AsyncStorage.setItem(key, value);\n      } catch (error) {\n        console.error(error.message);\n      }\n    }\n  }, {\n    key: \"saveAlert\",\n    value: function saveAlert(alertData) {\n      var localDataStr, alertStrArr, newAlertObj, _newAlertObj, newAlertData;\n\n      return _regeneratorRuntime.async(function saveAlert$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(this.getItem(KEY_ALERTS));\n\n            case 2:\n              localDataStr = _context.sent;\n\n              if (localDataStr == null) {\n                alertStrArr = [];\n                newAlertObj = alertData;\n                alertStrArr.push(JSON.stringify(newAlertObj));\n                this.setItem(KEY_ALERTS, alertStrArr.join());\n              } else {\n                _newAlertObj = alertData;\n                newAlertData = localDataStr + \" \" + JSON.stringify(_newAlertObj);\n                this.setItem(KEY_ALERTS, newAlertData);\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"getObjDatasArr\",\n    value: function getObjDatasArr() {\n      var localDataStr, objDatasArr;\n      return _regeneratorRuntime.async(function getObjDatasArr$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(this.getItem(KEY_ALERTS));\n\n            case 2:\n              localDataStr = _context2.sent;\n\n              if (!localDataStr) {\n                _context2.next = 8;\n                break;\n              }\n\n              objDatasArr = localDataStr.split(\" \").map(function (obj) {\n                return JSON.parse(obj);\n              });\n              return _context2.abrupt(\"return\", objDatasArr);\n\n            case 8:\n              return _context2.abrupt(\"return\", null);\n\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"changeDataInfo\",\n    value: function changeDataInfo(alertID, changedData) {\n      var localDataStr, objDatasArr, _iterator, _isArray, _i, _ref, _obj, newObj, newData;\n\n      return _regeneratorRuntime.async(function changeDataInfo$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _context3.next = 2;\n              return _regeneratorRuntime.awrap(this.getItem(KEY_ALERTS));\n\n            case 2:\n              localDataStr = _context3.sent;\n              objDatasArr = localDataStr.split(\" \").map(function (obj) {\n                return JSON.parse(obj);\n              });\n              _iterator = objDatasArr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\" : \"@@iterator\"]();\n\n            case 5:\n              if (!_isArray) {\n                _context3.next = 11;\n                break;\n              }\n\n              if (!(_i >= _iterator.length)) {\n                _context3.next = 8;\n                break;\n              }\n\n              return _context3.abrupt(\"break\", 23);\n\n            case 8:\n              _ref = _iterator[_i++];\n              _context3.next = 15;\n              break;\n\n            case 11:\n              _i = _iterator.next();\n\n              if (!_i.done) {\n                _context3.next = 14;\n                break;\n              }\n\n              return _context3.abrupt(\"break\", 23);\n\n            case 14:\n              _ref = _i.value;\n\n            case 15:\n              _obj = _ref;\n\n              if (!(_obj.id == alertID)) {\n                _context3.next = 21;\n                break;\n              }\n\n              newObj = _extends({}, _obj, changedData);\n              newData = localDataStr.replace(JSON.stringify(_obj), JSON.stringify(newObj));\n              this.setItem(KEY_ALERTS, newData);\n              return _context3.abrupt(\"break\", 23);\n\n            case 21:\n              _context3.next = 5;\n              break;\n\n            case 23:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, this, null, Promise);\n    }\n  }, {\n    key: \"showFalse\",\n    value: function showFalse(alertID, callBack) {\n      var newObj = {\n        show: false,\n        savedTime: Date.now()\n      };\n      this.changeDataInfo(alertID, newObj).then(function () {\n        return callBack();\n      });\n    }\n  }, {\n    key: \"showTrue\",\n    value: function showTrue(alertID, callBack) {\n      var newObj = {\n        show: true\n      };\n      this.changeDataInfo(alertID, newObj).then(function () {\n        return callBack();\n      });\n    }\n  }]);\n\n  return AlertStorageManager;\n}();\n\nexport { AlertStorageManager as default };","map":{"version":3,"sources":["C:/Users/Lucas/tcc/frontend/node_modules/react-native-awesome-alert/src/AlertStorageManager.js"],"names":["KEY_ALERTS","AlertStorageManager","key","localDataStr","AsyncStorage","getItem","then","data","value","setItem","error","console","message","alertData","alertStrArr","newAlertObj","push","JSON","stringify","join","newAlertData","objDatasArr","split","map","obj","parse","alertID","changedData","id","newObj","newData","replace","callBack","show","savedTime","Date","now","changeDataInfo"],"mappings":";;;;;AACA,IAAMA,UAAU,GAAG,YAAnB;;IAEqBC,mB;;;;;;;4BACXC,G,EAAK;AACX,UAAMC,YAAY,GAAGC,YAAY,CAACC,OAAb,CAAqBH,GAArB,EAA0BI,IAA1B,CAA+B,UAAAC,IAAI;AAAA,eAAIA,IAAJ;AAAA,OAAnC,CAArB;AACA,aAAOJ,YAAP;AACD;;;4BAEOD,G,EAAKM,K,EAAO;AAClB,UAAI;AACFJ,QAAAA,YAAY,CAACK,OAAb,CAAqBP,GAArB,EAA0BM,KAA1B;AACD,OAFD,CAEE,OAAOE,KAAP,EAAc;AACdC,QAAAA,OAAO,CAACD,KAAR,CAAcA,KAAK,CAACE,OAApB;AACD;AACF;;;8BAEeC,S;;;;;;;;+CACa,KAAKR,OAAL,CAAaL,UAAb,C;;;AAArBG,cAAAA,Y;;AAEN,kBAAIA,YAAY,IAAI,IAApB,EAA0B;AAClBW,gBAAAA,WADkB,GACJ,EADI;AAElBC,gBAAAA,WAFkB,GAEJF,SAFI;AAGxBC,gBAAAA,WAAW,CAACE,IAAZ,CAAiBC,IAAI,CAACC,SAAL,CAAeH,WAAf,CAAjB;AACA,qBAAKN,OAAL,CAAaT,UAAb,EAAyBc,WAAW,CAACK,IAAZ,EAAzB;AACD,eALD,MAKO;AACCJ,gBAAAA,YADD,GACeF,SADf;AAECO,gBAAAA,YAFD,GAEgBjB,YAAY,GAAG,GAAf,GAAqBc,IAAI,CAACC,SAAL,CAAeH,YAAf,CAFrC;AAGL,qBAAKN,OAAL,CAAaT,UAAb,EAAyBoB,YAAzB;AACD;;;;;;;;;;;;;;;;;;+CAI0B,KAAKf,OAAL,CAAaL,UAAb,C;;;AAArBG,cAAAA,Y;;mBAEFA,Y;;;;;AACIkB,cAAAA,W,GAAclB,YAAY,CAACmB,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4B,UAAAC,GAAG;AAAA,uBAAIP,IAAI,CAACQ,KAAL,CAAWD,GAAX,CAAJ;AAAA,eAA/B,C;gDACbH,W;;;gDAEA,I;;;;;;;;;;;mCAIUK,O,EAASC,W;;;;;;;;+CACD,KAAKtB,OAAL,CAAaL,UAAb,C;;;AAArBG,cAAAA,Y;AACAkB,cAAAA,W,GAAclB,YAAY,CAACmB,KAAb,CAAmB,GAAnB,EAAwBC,GAAxB,CAA4B,UAAAC,GAAG;AAAA,uBAAIP,IAAI,CAACQ,KAAL,CAAWD,GAAX,CAAJ;AAAA,eAA/B,C;0BAEJH,W;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAPG,cAAAA,I;;oBACHA,IAAG,CAACI,EAAJ,IAAUF,O;;;;;AACNG,cAAAA,M,GAAS,SAAc,EAAd,EAAkBL,IAAlB,EAAuBG,WAAvB,C;AACTG,cAAAA,O,GAAU3B,YAAY,CAAC4B,OAAb,CAAqBd,IAAI,CAACC,SAAL,CAAeM,IAAf,CAArB,EAA0CP,IAAI,CAACC,SAAL,CAAeW,MAAf,CAA1C,C;AAChB,mBAAKpB,OAAL,CAAaT,UAAb,EAAyB8B,OAAzB;;;;;;;;;;;;;;;;8BAMIJ,O,EAASM,Q,EAAU;AAC3B,UAAMH,MAAM,GAAG;AAAEI,QAAAA,IAAI,EAAE,KAAR;AAAeC,QAAAA,SAAS,EAAEC,IAAI,CAACC,GAAL;AAA1B,OAAf;AACA,WAAKC,cAAL,CAAoBX,OAApB,EAA6BG,MAA7B,EAAqCvB,IAArC,CAA0C;AAAA,eAAM0B,QAAQ,EAAd;AAAA,OAA1C;AACD;;;6BAEQN,O,EAASM,Q,EAAU;AAC1B,UAAMH,MAAM,GAAG;AAAEI,QAAAA,IAAI,EAAE;AAAR,OAAf;AACA,WAAKI,cAAL,CAAoBX,OAApB,EAA6BG,MAA7B,EAAqCvB,IAArC,CAA0C;AAAA,eAAM0B,QAAQ,EAAd;AAAA,OAA1C;AACD;;;;;;SA9DkB/B,mB","sourcesContent":["import { AsyncStorage } from \"react-native\"\nconst KEY_ALERTS = \"KEY_ALERTS\"\n\nexport default class AlertStorageManager {\n  getItem(key) {\n    const localDataStr = AsyncStorage.getItem(key).then(data => data)\n    return localDataStr\n  }\n\n  setItem(key, value) {\n    try {\n      AsyncStorage.setItem(key, value)\n    } catch (error) {\n      console.error(error.message)\n    }\n  }\n\n  async saveAlert(alertData) {\n    const localDataStr = await this.getItem(KEY_ALERTS)\n\n    if (localDataStr == null) {\n      const alertStrArr = []\n      const newAlertObj = alertData\n      alertStrArr.push(JSON.stringify(newAlertObj))\n      this.setItem(KEY_ALERTS, alertStrArr.join())\n    } else {\n      const newAlertObj = alertData\n      const newAlertData = localDataStr + \" \" + JSON.stringify(newAlertObj)\n      this.setItem(KEY_ALERTS, newAlertData)\n    }\n  }\n\n  async getObjDatasArr() {\n    const localDataStr = await this.getItem(KEY_ALERTS)\n\n    if (localDataStr) {\n      const objDatasArr = localDataStr.split(\" \").map(obj => JSON.parse(obj))\n      return objDatasArr\n    } else {\n      return null\n    }\n  }\n\n  async changeDataInfo(alertID, changedData) {\n    const localDataStr = await this.getItem(KEY_ALERTS)\n    const objDatasArr = localDataStr.split(\" \").map(obj => JSON.parse(obj))\n\n    for (let obj of objDatasArr) {\n      if (obj.id == alertID) {\n        const newObj = Object.assign({}, obj, changedData)\n        const newData = localDataStr.replace(JSON.stringify(obj), JSON.stringify(newObj))\n        this.setItem(KEY_ALERTS, newData)\n        break\n      }\n    }\n  }\n\n  showFalse(alertID, callBack) {\n    const newObj = { show: false, savedTime: Date.now() }\n    this.changeDataInfo(alertID, newObj).then(() => callBack())\n  }\n\n  showTrue(alertID, callBack) {\n    const newObj = { show: true }\n    this.changeDataInfo(alertID, newObj).then(() => callBack())\n  }\n}\n"]},"metadata":{},"sourceType":"module"}
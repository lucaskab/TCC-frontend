{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\tcc\\\\frontend\\\\node_modules\\\\react-native-awesome-alerts\\\\src\\\\AwesomeAlert.js\";\nimport React, { Component } from 'react';\nimport Text from \"react-native-web/dist/exports/Text\";\nimport Animated from \"react-native-web/dist/exports/Animated\";\nimport View from \"react-native-web/dist/exports/View\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport TouchableWithoutFeedback from \"react-native-web/dist/exports/TouchableWithoutFeedback\";\nimport ActivityIndicator from \"react-native-web/dist/exports/ActivityIndicator\";\nimport { BackAndroid } from \"react-native-web/dist/index\";\nimport BackHandler from \"react-native-web/dist/exports/BackHandler\";\nimport PropTypes from 'prop-types';\nimport styles from \"./styles\";\nvar HwBackHandler = BackHandler || BackAndroid;\nvar HW_BACK_EVENT = 'hardwareBackPress';\n\nvar AwesomeAlert = function (_Component) {\n  _inherits(AwesomeAlert, _Component);\n\n  function AwesomeAlert(props) {\n    var _this;\n\n    _classCallCheck(this, AwesomeAlert);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(AwesomeAlert).call(this, props));\n\n    _this._springShow = function (fromConstructor) {\n      _this._toggleAlert(fromConstructor);\n\n      Animated.spring(_this.springValue, {\n        toValue: 1,\n        bounciness: 10\n      }).start();\n    };\n\n    _this._springHide = function () {\n      if (_this.state.showSelf === true) {\n        Animated.spring(_this.springValue, {\n          toValue: 0,\n          tension: 10\n        }).start();\n        setTimeout(function () {\n          _this._toggleAlert();\n\n          _this._onDismiss();\n        }, 70);\n      }\n    };\n\n    _this._toggleAlert = function (fromConstructor) {\n      if (fromConstructor) _this.state = {\n        showSelf: true\n      };else _this.setState({\n        showSelf: !_this.state.showSelf\n      });\n    };\n\n    _this._handleHwBackEvent = function () {\n      var closeOnHardwareBackPress = _this.props.closeOnHardwareBackPress;\n\n      if (_this.state.showSelf && closeOnHardwareBackPress) {\n        _this._springHide();\n\n        return true;\n      } else if (!closeOnHardwareBackPress && _this.state.showSelf) {\n        return true;\n      }\n\n      return false;\n    };\n\n    _this._onTapOutside = function () {\n      var closeOnTouchOutside = _this.props.closeOnTouchOutside;\n      if (closeOnTouchOutside) _this._springHide();\n    };\n\n    _this._onDismiss = function () {\n      var onDismiss = _this.props.onDismiss;\n      onDismiss && onDismiss();\n    };\n\n    _this._renderButton = function (data) {\n      var text = data.text,\n          backgroundColor = data.backgroundColor,\n          buttonStyle = data.buttonStyle,\n          buttonTextStyle = data.buttonTextStyle,\n          onPress = data.onPress;\n      return React.createElement(TouchableOpacity, {\n        onPress: onPress,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 96\n        }\n      }, React.createElement(View, {\n        style: [styles.button, {\n          backgroundColor: backgroundColor\n        }, buttonStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97\n        }\n      }, React.createElement(Text, {\n        style: [styles.buttonText, buttonTextStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 98\n        }\n      }, text)));\n    };\n\n    _this._renderAlert = function () {\n      var animation = {\n        transform: [{\n          scale: _this.springValue\n        }]\n      };\n      var showProgress = _this.props.showProgress;\n      var _this$props = _this.props,\n          title = _this$props.title,\n          message = _this$props.message,\n          _this$props$customVie = _this$props.customView,\n          customView = _this$props$customVie === void 0 ? null : _this$props$customVie;\n      var _this$props2 = _this.props,\n          showCancelButton = _this$props2.showCancelButton,\n          cancelText = _this$props2.cancelText,\n          cancelButtonColor = _this$props2.cancelButtonColor,\n          cancelButtonStyle = _this$props2.cancelButtonStyle,\n          cancelButtonTextStyle = _this$props2.cancelButtonTextStyle,\n          onCancelPressed = _this$props2.onCancelPressed;\n      var _this$props3 = _this.props,\n          showConfirmButton = _this$props3.showConfirmButton,\n          confirmText = _this$props3.confirmText,\n          confirmButtonColor = _this$props3.confirmButtonColor,\n          confirmButtonStyle = _this$props3.confirmButtonStyle,\n          confirmButtonTextStyle = _this$props3.confirmButtonTextStyle,\n          onConfirmPressed = _this$props3.onConfirmPressed;\n      var _this$props4 = _this.props,\n          alertContainerStyle = _this$props4.alertContainerStyle,\n          overlayStyle = _this$props4.overlayStyle,\n          progressSize = _this$props4.progressSize,\n          progressColor = _this$props4.progressColor,\n          contentContainerStyle = _this$props4.contentContainerStyle,\n          titleStyle = _this$props4.titleStyle,\n          messageStyle = _this$props4.messageStyle;\n      var cancelButtonData = {\n        text: cancelText,\n        backgroundColor: cancelButtonColor,\n        buttonStyle: cancelButtonStyle,\n        buttonTextStyle: cancelButtonTextStyle,\n        onPress: onCancelPressed\n      };\n      var confirmButtonData = {\n        text: confirmText,\n        backgroundColor: confirmButtonColor,\n        buttonStyle: confirmButtonStyle,\n        buttonTextStyle: confirmButtonTextStyle,\n        onPress: onConfirmPressed\n      };\n      return React.createElement(View, {\n        style: [styles.container, alertContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 154\n        }\n      }, React.createElement(TouchableWithoutFeedback, {\n        onPress: _this._onTapOutside,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 155\n        }\n      }, React.createElement(View, {\n        style: [styles.overlay, overlayStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156\n        }\n      })), React.createElement(Animated.View, {\n        style: [styles.contentContainer, animation, contentContainerStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 158\n        }\n      }, React.createElement(View, {\n        style: styles.content,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 161\n        }\n      }, showProgress ? React.createElement(ActivityIndicator, {\n        size: progressSize,\n        color: progressColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 163\n        }\n      }) : null, title ? React.createElement(Text, {\n        style: [styles.title, titleStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 166\n        }\n      }, title) : null, message ? React.createElement(Text, {\n        style: [styles.message, messageStyle],\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 169\n        }\n      }, message) : null, customView), React.createElement(View, {\n        style: styles.action,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 173\n        }\n      }, showCancelButton ? _this._renderButton(cancelButtonData) : null, showConfirmButton ? _this._renderButton(confirmButtonData) : null)));\n    };\n\n    var show = _this.props.show;\n    _this.springValue = new Animated.Value(0.3);\n    _this.state = {\n      showSelf: false\n    };\n    if (show) _this._springShow(true);\n    return _this;\n  }\n\n  _createClass(AwesomeAlert, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      HwBackHandler.addEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var showSelf = this.state.showSelf;\n      if (showSelf) return this._renderAlert();\n      return null;\n    }\n  }, {\n    key: \"UNSAFE_componentWillReceiveProps\",\n    value: function UNSAFE_componentWillReceiveProps(nextProps) {\n      var show = nextProps.show;\n      var showSelf = this.state.showSelf;\n      if (show && !showSelf) this._springShow();else if (show === false && showSelf) this._springHide();\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      HwBackHandler.removeEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n    }\n  }]);\n\n  return AwesomeAlert;\n}(Component);\n\nexport { AwesomeAlert as default };\nAwesomeAlert.propTypes = {\n  show: PropTypes.bool,\n  showProgress: PropTypes.bool,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  closeOnTouchOutside: PropTypes.bool,\n  closeOnHardwareBackPress: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  showConfirmButton: PropTypes.bool,\n  cancelText: PropTypes.string,\n  confirmText: PropTypes.string,\n  cancelButtonColor: PropTypes.string,\n  confirmButtonColor: PropTypes.string,\n  onCancelPressed: PropTypes.func,\n  onConfirmPressed: PropTypes.func,\n  customView: PropTypes.object\n};\nAwesomeAlert.defaultProps = {\n  show: false,\n  showProgress: false,\n  closeOnTouchOutside: true,\n  closeOnHardwareBackPress: true,\n  showCancelButton: false,\n  showConfirmButton: false,\n  cancelText: 'Cancel',\n  confirmText: 'Confirm',\n  cancelButtonColor: '#D0D0D0',\n  confirmButtonColor: '#AEDEF4',\n  customView: null\n};","map":{"version":3,"sources":["C:/Users/Lucas/tcc/frontend/node_modules/react-native-awesome-alerts/src/AwesomeAlert.js"],"names":["React","Component","BackAndroid","PropTypes","styles","HwBackHandler","BackHandler","HW_BACK_EVENT","AwesomeAlert","props","_springShow","fromConstructor","_toggleAlert","Animated","spring","springValue","toValue","bounciness","start","_springHide","state","showSelf","tension","setTimeout","_onDismiss","setState","_handleHwBackEvent","closeOnHardwareBackPress","_onTapOutside","closeOnTouchOutside","onDismiss","_renderButton","data","text","backgroundColor","buttonStyle","buttonTextStyle","onPress","button","buttonText","_renderAlert","animation","transform","scale","showProgress","title","message","customView","showCancelButton","cancelText","cancelButtonColor","cancelButtonStyle","cancelButtonTextStyle","onCancelPressed","showConfirmButton","confirmText","confirmButtonColor","confirmButtonStyle","confirmButtonTextStyle","onConfirmPressed","alertContainerStyle","overlayStyle","progressSize","progressColor","contentContainerStyle","titleStyle","messageStyle","cancelButtonData","confirmButtonData","container","overlay","contentContainer","content","action","show","Value","addEventListener","nextProps","removeEventListener","propTypes","bool","string","func","object","defaultProps"],"mappings":";;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;;;;;;;SAQEC,W;;AAIF,OAAOC,SAAP,MAAsB,YAAtB;AAEA,OAAOC,MAAP;AAEA,IAAMC,aAAa,GAAGC,WAAW,IAAIJ,WAArC;AACA,IAAMK,aAAa,GAAG,mBAAtB;;IAEqBC,Y;;;AACnB,wBAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACjB,sFAAMA,KAAN;;AADiB,UAgBnBC,WAhBmB,GAgBL,UAAAC,eAAe,EAAI;AAC/B,YAAKC,YAAL,CAAkBD,eAAlB;;AACAE,MAAAA,QAAQ,CAACC,MAAT,CAAgB,MAAKC,WAArB,EAAkC;AAChCC,QAAAA,OAAO,EAAE,CADuB;AAEhCC,QAAAA,UAAU,EAAE;AAFoB,OAAlC,EAGGC,KAHH;AAID,KAtBkB;;AAAA,UAwBnBC,WAxBmB,GAwBL,YAAM;AAClB,UAAI,MAAKC,KAAL,CAAWC,QAAX,KAAwB,IAA5B,EAAkC;AAChCR,QAAAA,QAAQ,CAACC,MAAT,CAAgB,MAAKC,WAArB,EAAkC;AAChCC,UAAAA,OAAO,EAAE,CADuB;AAEhCM,UAAAA,OAAO,EAAE;AAFuB,SAAlC,EAGGJ,KAHH;AAKAK,QAAAA,UAAU,CAAC,YAAM;AACf,gBAAKX,YAAL;;AACA,gBAAKY,UAAL;AACD,SAHS,EAGP,EAHO,CAAV;AAID;AACF,KApCkB;;AAAA,UAsCnBZ,YAtCmB,GAsCJ,UAAAD,eAAe,EAAI;AAChC,UAAIA,eAAJ,EAAqB,MAAKS,KAAL,GAAa;AAAEC,QAAAA,QAAQ,EAAE;AAAZ,OAAb,CAArB,KACK,MAAKI,QAAL,CAAc;AAAEJ,QAAAA,QAAQ,EAAE,CAAC,MAAKD,KAAL,CAAWC;AAAxB,OAAd;AACN,KAzCkB;;AAAA,UA2CnBK,kBA3CmB,GA2CE,YAAM;AAAA,UACjBC,wBADiB,GACY,MAAKlB,KADjB,CACjBkB,wBADiB;;AAEzB,UAAI,MAAKP,KAAL,CAAWC,QAAX,IAAuBM,wBAA3B,EAAqD;AACnD,cAAKR,WAAL;;AACA,eAAO,IAAP;AACD,OAHD,MAGO,IAAI,CAACQ,wBAAD,IAA6B,MAAKP,KAAL,CAAWC,QAA5C,EAAsD;AAC3D,eAAO,IAAP;AACD;;AAED,aAAO,KAAP;AACD,KArDkB;;AAAA,UAuDnBO,aAvDmB,GAuDH,YAAM;AAAA,UACZC,mBADY,GACY,MAAKpB,KADjB,CACZoB,mBADY;AAEpB,UAAIA,mBAAJ,EAAyB,MAAKV,WAAL;AAC1B,KA1DkB;;AAAA,UA4DnBK,UA5DmB,GA4DN,YAAM;AAAA,UACTM,SADS,GACK,MAAKrB,KADV,CACTqB,SADS;AAEjBA,MAAAA,SAAS,IAAIA,SAAS,EAAtB;AACD,KA/DkB;;AAAA,UAiEnBC,aAjEmB,GAiEH,UAAAC,IAAI,EAAI;AAAA,UAEpBC,IAFoB,GAOlBD,IAPkB,CAEpBC,IAFoB;AAAA,UAGpBC,eAHoB,GAOlBF,IAPkB,CAGpBE,eAHoB;AAAA,UAIpBC,WAJoB,GAOlBH,IAPkB,CAIpBG,WAJoB;AAAA,UAKpBC,eALoB,GAOlBJ,IAPkB,CAKpBI,eALoB;AAAA,UAMpBC,OANoB,GAOlBL,IAPkB,CAMpBK,OANoB;AAStB,aACE,oBAAC,gBAAD;AAAkB,QAAA,OAAO,EAAEA,OAA3B;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACjC,MAAM,CAACkC,MAAR,EAAgB;AAAEJ,UAAAA,eAAe,EAAfA;AAAF,SAAhB,EAAqCC,WAArC,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC/B,MAAM,CAACmC,UAAR,EAAoBH,eAApB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAAoDH,IAApD,CADF,CADF,CADF;AAOD,KAjFkB;;AAAA,UAmFnBO,YAnFmB,GAmFJ,YAAM;AACnB,UAAMC,SAAS,GAAG;AAAEC,QAAAA,SAAS,EAAE,CAAC;AAAEC,UAAAA,KAAK,EAAE,MAAK5B;AAAd,SAAD;AAAb,OAAlB;AADmB,UAGX6B,YAHW,GAGM,MAAKnC,KAHX,CAGXmC,YAHW;AAAA,wBAI2B,MAAKnC,KAJhC;AAAA,UAIXoC,KAJW,eAIXA,KAJW;AAAA,UAIJC,OAJI,eAIJA,OAJI;AAAA,8CAIKC,UAJL;AAAA,UAIKA,UAJL,sCAIkB,IAJlB;AAAA,yBAaf,MAAKtC,KAbU;AAAA,UAOjBuC,gBAPiB,gBAOjBA,gBAPiB;AAAA,UAQjBC,UARiB,gBAQjBA,UARiB;AAAA,UASjBC,iBATiB,gBASjBA,iBATiB;AAAA,UAUjBC,iBAViB,gBAUjBA,iBAViB;AAAA,UAWjBC,qBAXiB,gBAWjBA,qBAXiB;AAAA,UAYjBC,eAZiB,gBAYjBA,eAZiB;AAAA,yBAqBf,MAAK5C,KArBU;AAAA,UAejB6C,iBAfiB,gBAejBA,iBAfiB;AAAA,UAgBjBC,WAhBiB,gBAgBjBA,WAhBiB;AAAA,UAiBjBC,kBAjBiB,gBAiBjBA,kBAjBiB;AAAA,UAkBjBC,kBAlBiB,gBAkBjBA,kBAlBiB;AAAA,UAmBjBC,sBAnBiB,gBAmBjBA,sBAnBiB;AAAA,UAoBjBC,gBApBiB,gBAoBjBA,gBApBiB;AAAA,yBA+Bf,MAAKlD,KA/BU;AAAA,UAwBjBmD,mBAxBiB,gBAwBjBA,mBAxBiB;AAAA,UAyBjBC,YAzBiB,gBAyBjBA,YAzBiB;AAAA,UA0BjBC,YA1BiB,gBA0BjBA,YA1BiB;AAAA,UA2BjBC,aA3BiB,gBA2BjBA,aA3BiB;AAAA,UA4BjBC,qBA5BiB,gBA4BjBA,qBA5BiB;AAAA,UA6BjBC,UA7BiB,gBA6BjBA,UA7BiB;AAAA,UA8BjBC,YA9BiB,gBA8BjBA,YA9BiB;AAiCnB,UAAMC,gBAAgB,GAAG;AACvBlC,QAAAA,IAAI,EAAEgB,UADiB;AAEvBf,QAAAA,eAAe,EAAEgB,iBAFM;AAGvBf,QAAAA,WAAW,EAAEgB,iBAHU;AAIvBf,QAAAA,eAAe,EAAEgB,qBAJM;AAKvBf,QAAAA,OAAO,EAAEgB;AALc,OAAzB;AAQA,UAAMe,iBAAiB,GAAG;AACxBnC,QAAAA,IAAI,EAAEsB,WADkB;AAExBrB,QAAAA,eAAe,EAAEsB,kBAFO;AAGxBrB,QAAAA,WAAW,EAAEsB,kBAHW;AAIxBrB,QAAAA,eAAe,EAAEsB,sBAJO;AAKxBrB,QAAAA,OAAO,EAAEsB;AALe,OAA1B;AAQA,aACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACvD,MAAM,CAACiE,SAAR,EAAmBT,mBAAnB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,wBAAD;AAA0B,QAAA,OAAO,EAAE,MAAKhC,aAAxC;AAAA;AAAA;AAAA;AAAA;AAAA,SACE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACxB,MAAM,CAACkE,OAAR,EAAiBT,YAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,QADF,CADF,EAIE,oBAAC,QAAD,CAAU,IAAV;AACE,QAAA,KAAK,EAAE,CAACzD,MAAM,CAACmE,gBAAR,EAA0B9B,SAA1B,EAAqCuB,qBAArC,CADT;AAAA;AAAA;AAAA;AAAA;AAAA,SAGE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE5D,MAAM,CAACoE,OAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SACG5B,YAAY,GACX,oBAAC,iBAAD;AAAmB,QAAA,IAAI,EAAEkB,YAAzB;AAAuC,QAAA,KAAK,EAAEC,aAA9C;AAAA;AAAA;AAAA;AAAA;AAAA,QADW,GAET,IAHN,EAIGlB,KAAK,GACJ,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAACzC,MAAM,CAACyC,KAAR,EAAeoB,UAAf,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAA0CpB,KAA1C,CADI,GAEF,IANN,EAOGC,OAAO,GACN,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE,CAAC1C,MAAM,CAAC0C,OAAR,EAAiBoB,YAAjB,CAAb;AAAA;AAAA;AAAA;AAAA;AAAA,SAA8CpB,OAA9C,CADM,GAEJ,IATN,EAUGC,UAVH,CAHF,EAeE,oBAAC,IAAD;AAAM,QAAA,KAAK,EAAE3C,MAAM,CAACqE,MAApB;AAAA;AAAA;AAAA;AAAA;AAAA,SACGzB,gBAAgB,GAAG,MAAKjB,aAAL,CAAmBoC,gBAAnB,CAAH,GAA0C,IAD7D,EAEGb,iBAAiB,GAAG,MAAKvB,aAAL,CAAmBqC,iBAAnB,CAAH,GAA2C,IAF/D,CAfF,CAJF,CADF;AA2BD,KA/JkB;;AAAA,QAETM,IAFS,GAEA,MAAKjE,KAFL,CAETiE,IAFS;AAGjB,UAAK3D,WAAL,GAAmB,IAAIF,QAAQ,CAAC8D,KAAb,CAAmB,GAAnB,CAAnB;AAEA,UAAKvD,KAAL,GAAa;AACXC,MAAAA,QAAQ,EAAE;AADC,KAAb;AAIA,QAAIqD,IAAJ,EAAU,MAAKhE,WAAL,CAAiB,IAAjB;AATO;AAUlB;;;;wCAEmB;AAClBL,MAAAA,aAAa,CAACuE,gBAAd,CAA+BrE,aAA/B,EAA8C,KAAKmB,kBAAnD;AACD;;;6BAmJQ;AAAA,UACCL,QADD,GACc,KAAKD,KADnB,CACCC,QADD;AAGP,UAAIA,QAAJ,EAAc,OAAO,KAAKmB,YAAL,EAAP;AAEd,aAAO,IAAP;AACD;;;qDAEgCqC,S,EAAW;AAAA,UAClCH,IADkC,GACzBG,SADyB,CAClCH,IADkC;AAAA,UAElCrD,QAFkC,GAErB,KAAKD,KAFgB,CAElCC,QAFkC;AAI1C,UAAIqD,IAAI,IAAI,CAACrD,QAAb,EAAuB,KAAKX,WAAL,GAAvB,KACK,IAAIgE,IAAI,KAAK,KAAT,IAAkBrD,QAAtB,EAAgC,KAAKF,WAAL;AACtC;;;2CAEsB;AACrBd,MAAAA,aAAa,CAACyE,mBAAd,CAAkCvE,aAAlC,EAAiD,KAAKmB,kBAAtD;AACD;;;;EApLuCzB,S;;SAArBO,Y;AAuLrBA,YAAY,CAACuE,SAAb,GAAyB;AACvBL,EAAAA,IAAI,EAAEvE,SAAS,CAAC6E,IADO;AAEvBpC,EAAAA,YAAY,EAAEzC,SAAS,CAAC6E,IAFD;AAGvBnC,EAAAA,KAAK,EAAE1C,SAAS,CAAC8E,MAHM;AAIvBnC,EAAAA,OAAO,EAAE3C,SAAS,CAAC8E,MAJI;AAKvBpD,EAAAA,mBAAmB,EAAE1B,SAAS,CAAC6E,IALR;AAMvBrD,EAAAA,wBAAwB,EAAExB,SAAS,CAAC6E,IANb;AAOvBhC,EAAAA,gBAAgB,EAAE7C,SAAS,CAAC6E,IAPL;AAQvB1B,EAAAA,iBAAiB,EAAEnD,SAAS,CAAC6E,IARN;AASvB/B,EAAAA,UAAU,EAAE9C,SAAS,CAAC8E,MATC;AAUvB1B,EAAAA,WAAW,EAAEpD,SAAS,CAAC8E,MAVA;AAWvB/B,EAAAA,iBAAiB,EAAE/C,SAAS,CAAC8E,MAXN;AAYvBzB,EAAAA,kBAAkB,EAAErD,SAAS,CAAC8E,MAZP;AAavB5B,EAAAA,eAAe,EAAElD,SAAS,CAAC+E,IAbJ;AAcvBvB,EAAAA,gBAAgB,EAAExD,SAAS,CAAC+E,IAdL;AAevBnC,EAAAA,UAAU,EAAE5C,SAAS,CAACgF;AAfC,CAAzB;AAkBA3E,YAAY,CAAC4E,YAAb,GAA4B;AAC1BV,EAAAA,IAAI,EAAE,KADoB;AAE1B9B,EAAAA,YAAY,EAAE,KAFY;AAG1Bf,EAAAA,mBAAmB,EAAE,IAHK;AAI1BF,EAAAA,wBAAwB,EAAE,IAJA;AAK1BqB,EAAAA,gBAAgB,EAAE,KALQ;AAM1BM,EAAAA,iBAAiB,EAAE,KANO;AAO1BL,EAAAA,UAAU,EAAE,QAPc;AAQ1BM,EAAAA,WAAW,EAAE,SARa;AAS1BL,EAAAA,iBAAiB,EAAE,SATO;AAU1BM,EAAAA,kBAAkB,EAAE,SAVM;AAW1BT,EAAAA,UAAU,EAAE;AAXc,CAA5B","sourcesContent":["import React, { Component } from 'react';\nimport {\n  Text,\n  Animated,\n  View,\n  TouchableOpacity,\n  TouchableWithoutFeedback,\n  ActivityIndicator,\n  BackAndroid,\n  BackHandler\n} from 'react-native';\n\nimport PropTypes from 'prop-types';\n\nimport styles from './styles';\n\nconst HwBackHandler = BackHandler || BackAndroid;\nconst HW_BACK_EVENT = 'hardwareBackPress';\n\nexport default class AwesomeAlert extends Component {\n  constructor(props) {\n    super(props);\n    const { show } = this.props;\n    this.springValue = new Animated.Value(0.3);\n\n    this.state = {\n      showSelf: false\n    };\n\n    if (show) this._springShow(true);\n  }\n\n  componentDidMount() {\n    HwBackHandler.addEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n  }\n\n  _springShow = fromConstructor => {\n    this._toggleAlert(fromConstructor);\n    Animated.spring(this.springValue, {\n      toValue: 1,\n      bounciness: 10\n    }).start();\n  };\n\n  _springHide = () => {\n    if (this.state.showSelf === true) {\n      Animated.spring(this.springValue, {\n        toValue: 0,\n        tension: 10\n      }).start();\n\n      setTimeout(() => {\n        this._toggleAlert();\n        this._onDismiss();\n      }, 70);\n    }\n  };\n\n  _toggleAlert = fromConstructor => {\n    if (fromConstructor) this.state = { showSelf: true };\n    else this.setState({ showSelf: !this.state.showSelf });\n  };\n\n  _handleHwBackEvent = () => {\n    const { closeOnHardwareBackPress } = this.props;\n    if (this.state.showSelf && closeOnHardwareBackPress) {\n      this._springHide();\n      return true;\n    } else if (!closeOnHardwareBackPress && this.state.showSelf) {\n      return true;\n    }\n\n    return false;\n  };\n\n  _onTapOutside = () => {\n    const { closeOnTouchOutside } = this.props;\n    if (closeOnTouchOutside) this._springHide();\n  };\n\n  _onDismiss = () => {\n    const { onDismiss } = this.props;\n    onDismiss && onDismiss();\n  };\n\n  _renderButton = data => {\n    const {\n      text,\n      backgroundColor,\n      buttonStyle,\n      buttonTextStyle,\n      onPress\n    } = data;\n\n    return (\n      <TouchableOpacity onPress={onPress}>\n        <View style={[styles.button, { backgroundColor }, buttonStyle]}>\n          <Text style={[styles.buttonText, buttonTextStyle]}>{text}</Text>\n        </View>\n      </TouchableOpacity>\n    );\n  };\n\n  _renderAlert = () => {\n    const animation = { transform: [{ scale: this.springValue }] };\n\n    const { showProgress } = this.props;\n    const { title, message, customView = null } = this.props;\n\n    const {\n      showCancelButton,\n      cancelText,\n      cancelButtonColor,\n      cancelButtonStyle,\n      cancelButtonTextStyle,\n      onCancelPressed\n    } = this.props;\n    const {\n      showConfirmButton,\n      confirmText,\n      confirmButtonColor,\n      confirmButtonStyle,\n      confirmButtonTextStyle,\n      onConfirmPressed\n    } = this.props;\n\n    const {\n      alertContainerStyle,\n      overlayStyle,\n      progressSize,\n      progressColor,\n      contentContainerStyle,\n      titleStyle,\n      messageStyle\n    } = this.props;\n\n    const cancelButtonData = {\n      text: cancelText,\n      backgroundColor: cancelButtonColor,\n      buttonStyle: cancelButtonStyle,\n      buttonTextStyle: cancelButtonTextStyle,\n      onPress: onCancelPressed\n    };\n\n    const confirmButtonData = {\n      text: confirmText,\n      backgroundColor: confirmButtonColor,\n      buttonStyle: confirmButtonStyle,\n      buttonTextStyle: confirmButtonTextStyle,\n      onPress: onConfirmPressed\n    };\n\n    return (\n      <View style={[styles.container, alertContainerStyle]}>\n        <TouchableWithoutFeedback onPress={this._onTapOutside}>\n          <View style={[styles.overlay, overlayStyle]} />\n        </TouchableWithoutFeedback>\n        <Animated.View\n          style={[styles.contentContainer, animation, contentContainerStyle]}\n        >\n          <View style={styles.content}>\n            {showProgress ? (\n              <ActivityIndicator size={progressSize} color={progressColor} />\n            ) : null}\n            {title ? (\n              <Text style={[styles.title, titleStyle]}>{title}</Text>\n            ) : null}\n            {message ? (\n              <Text style={[styles.message, messageStyle]}>{message}</Text>\n            ) : null}\n            {customView}\n          </View>\n          <View style={styles.action}>\n            {showCancelButton ? this._renderButton(cancelButtonData) : null}\n            {showConfirmButton ? this._renderButton(confirmButtonData) : null}\n          </View>\n        </Animated.View>\n      </View>\n    );\n  };\n\n  render() {\n    const { showSelf } = this.state;\n\n    if (showSelf) return this._renderAlert();\n\n    return null;\n  }\n\n  UNSAFE_componentWillReceiveProps(nextProps) {\n    const { show } = nextProps;\n    const { showSelf } = this.state;\n\n    if (show && !showSelf) this._springShow();\n    else if (show === false && showSelf) this._springHide();\n  }\n\n  componentWillUnmount() {\n    HwBackHandler.removeEventListener(HW_BACK_EVENT, this._handleHwBackEvent);\n  }\n}\n\nAwesomeAlert.propTypes = {\n  show: PropTypes.bool,\n  showProgress: PropTypes.bool,\n  title: PropTypes.string,\n  message: PropTypes.string,\n  closeOnTouchOutside: PropTypes.bool,\n  closeOnHardwareBackPress: PropTypes.bool,\n  showCancelButton: PropTypes.bool,\n  showConfirmButton: PropTypes.bool,\n  cancelText: PropTypes.string,\n  confirmText: PropTypes.string,\n  cancelButtonColor: PropTypes.string,\n  confirmButtonColor: PropTypes.string,\n  onCancelPressed: PropTypes.func,\n  onConfirmPressed: PropTypes.func,\n  customView: PropTypes.object\n};\n\nAwesomeAlert.defaultProps = {\n  show: false,\n  showProgress: false,\n  closeOnTouchOutside: true,\n  closeOnHardwareBackPress: true,\n  showCancelButton: false,\n  showConfirmButton: false,\n  cancelText: 'Cancel',\n  confirmText: 'Confirm',\n  cancelButtonColor: '#D0D0D0',\n  confirmButtonColor: '#AEDEF4',\n  customView: null\n};\n"]},"metadata":{},"sourceType":"module"}
{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _readOnlyError from \"@babel/runtime/helpers/readOnlyError\";\nvar _jsxFileName = \"C:\\\\Users\\\\Lucas\\\\tcc\\\\frontend\\\\node_modules\\\\react-native-awesome-alert\\\\src\\\\CheckAlert.js\";\nimport React, { Component } from \"react\";\nimport CheckBox from \"react-native-check-box\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport TouchableOpacity from \"react-native-web/dist/exports/TouchableOpacity\";\nimport Alert from \"react-native-web/dist/exports/Alert\";\nimport Modal from \"react-native-web/dist/exports/Modal\";\nimport PropTypes from \"prop-types\";\nimport AlertStorageManager from \"./AlertStorageManager\";\nimport TimeManager from \"./TimeManager\";\nimport checkAlertStyles from \"./CheckAlert.style\";\nvar styles = {};\nvar NEVER_ALERT_PREFIX = \"neverAskAlert:\";\nvar RANDOM_ALERT_PREFIX = \"randomAskAlert:\";\n\nvar CheckAlert = function (_Component) {\n  _inherits(CheckAlert, _Component);\n\n  function CheckAlert(props) {\n    var _this;\n\n    _classCallCheck(this, CheckAlert);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(CheckAlert).call(this, props));\n    _this.state = {\n      modalVisible: false,\n      askAlways: true,\n      alertsArr: []\n    };\n    _this.checkbox = true;\n    _this.modalID = null;\n    _this.checkSaveBtnIdx = null;\n    _this.title = \" \";\n    _this.messagesView = null;\n    _this.buttons = [];\n    _this.checkText = \" \";\n    _this.invisibleTime = null;\n    new AlertStorageManager().getObjDatasArr().then(function (objDatas) {\n      _this.setState({\n        alertsArr: objDatas\n      });\n    }).catch(function (err) {\n      return console.warn(err.message);\n    });\n\n    if (_this.props.styles) {\n      Object.keys(checkAlertStyles).forEach(function (key) {\n        styles[key] = StyleSheet.flatten([checkAlertStyles[key], _this.props.styles[key]]);\n      });\n    } else {\n      styles = (_readOnlyError(\"styles\"), checkAlertStyles);\n    }\n\n    return _this;\n  }\n\n  _createClass(CheckAlert, [{\n    key: \"shouldComponentUpdate\",\n    value: function shouldComponentUpdate(nextProps, nextState) {\n      var beforeAskAlways = this.state.askAlways;\n      var beforeModalVisible = this.state.modalVisible;\n      var askAlways = nextState.askAlways,\n          modalVisible = nextState.modalVisible;\n\n      if (beforeAskAlways != askAlways || beforeModalVisible != modalVisible) {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"typeChecker\",\n    value: function typeChecker(title, messagesView, buttons, checkText, invisibleTime) {\n      if (typeof title !== \"string\" || !React.isValidElement(messagesView) || !Array.isArray(buttons) || typeof checkText !== \"string\" || typeof invisibleTime !== \"number\") {\n        return true;\n      } else {\n        return false;\n      }\n    }\n  }, {\n    key: \"parseButton\",\n    value: function parseButton(buttons, isNeverAsk) {\n      for (var i in buttons) {\n        if (buttons[i].hasOwnProperty(\"id\")) {\n          this.modalID = isNeverAsk ? NEVER_ALERT_PREFIX + buttons[i].id : RANDOM_ALERT_PREFIX + buttons[i].id;\n          this.checkSaveBtnIdx = parseInt(i);\n          break;\n        }\n      }\n    }\n  }, {\n    key: \"alert\",\n    value: function alert(title, messagesView, buttons) {\n      var typeError = this.typeChecker(title, messagesView, buttons, \" \", 0);\n\n      if (typeError) {\n        console.warn(\"TypeError, check the alert parameter\");\n        return;\n      }\n\n      this.title = title;\n      this.messagesView = messagesView;\n      this.buttons = buttons;\n      this.checkbox = false;\n      this.openModal();\n    }\n  }, {\n    key: \"checkAlert\",\n    value: function checkAlert(title, messagesView, buttons, checkText, invisibleTime, isNeverAsk) {\n      var _this2 = this;\n\n      var typeError = this.typeChecker(title, messagesView, buttons, checkText, invisibleTime);\n\n      if (typeError) {\n        console.warn(\"TypeError, check the alert parameter\");\n        return;\n      }\n\n      var newID = true;\n      var alertData = null;\n      this.parseButton(buttons, isNeverAsk);\n\n      if (this.modalID != null) {\n        this.title = title;\n        this.messagesView = messagesView;\n        this.buttons = buttons;\n        this.checkbox = true;\n        this.checkText = checkText;\n        this.invisibleTime = invisibleTime;\n\n        if (this.state.alertsArr != null) {\n          for (var _iterator = this.state.alertsArr, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n            var _ref;\n\n            if (_isArray) {\n              if (_i >= _iterator.length) break;\n              _ref = _iterator[_i++];\n            } else {\n              _i = _iterator.next();\n              if (_i.done) break;\n              _ref = _i.value;\n            }\n\n            var _alert = _ref;\n\n            if (_alert.id == this.modalID) {\n              newID = false;\n              alertData = _alert;\n              break;\n            }\n          }\n        }\n\n        if (newID) {\n          alertData = {\n            id: this.modalID,\n            show: true,\n            savedTime: Date.now()\n          };\n          new AlertStorageManager().saveAlert(alertData).then(function () {\n            _this2.openModal(alertData);\n\n            new AlertStorageManager().getObjDatasArr().then(function (objDatas) {\n              return _this2.setState({\n                alertsArr: objDatas\n              });\n            }).catch(function (err) {\n              return console.warn(err.message);\n            });\n          });\n        } else {\n          this.openModal(alertData);\n        }\n      } else {\n        console.warn(\"you missed Alert button's ID\");\n      }\n    }\n  }, {\n    key: \"neverAskAlert\",\n    value: function neverAskAlert(title, messagesView, buttons) {\n      var checkText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \" \";\n      this.checkAlert(title, messagesView, buttons, checkText, 0, true);\n    }\n  }, {\n    key: \"randomAskAlert\",\n    value: function randomAskAlert(title, messagesView, buttons) {\n      var checkText = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : \" \";\n      var invisibleTime = arguments.length > 4 ? arguments[4] : undefined;\n      this.checkAlert(title, messagesView, buttons, checkText, invisibleTime, false);\n    }\n  }, {\n    key: \"setModalVisible\",\n    value: function setModalVisible(visible) {\n      var _this3 = this;\n\n      var buttonIdx = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n      if (!visible && !this.state.askAlways && buttonIdx === this.checkSaveBtnIdx) {\n        var alertStorageManager = new AlertStorageManager();\n        alertStorageManager.showFalse(this.modalID, function () {\n          return alertStorageManager.getObjDatasArr().then(function (objDatas) {\n            return _this3.setState({\n              alertsArr: objDatas\n            });\n          }).catch(function (err) {\n            return console.warn(err.message);\n          });\n        });\n      }\n\n      this.setState({\n        modalVisible: visible,\n        askAlways: true\n      });\n    }\n  }, {\n    key: \"openModal\",\n    value: function openModal() {\n      var _this4 = this;\n\n      var alertData = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : null;\n\n      if (alertData == null) {\n        this.setModalVisible(true);\n        return;\n      }\n\n      if (alertData.id.includes(RANDOM_ALERT_PREFIX)) {\n        var overDay = TimeManager.randomeTimeCheck(alertData.savedTime, Date.now(), this.invisibleTime);\n\n        if (overDay && !alertData.show) {\n          var alertStorageManager = new AlertStorageManager();\n          alertStorageManager.showTrue(this.modalID, function () {\n            return alertStorageManager.getObjDatasArr().then(function (objDatas) {\n              return _this4.setState({\n                alertsArr: objDatas\n              });\n            }).catch(function (err) {\n              return console.warn(err.message);\n            });\n          });\n          this.setModalVisible(true);\n        }\n      }\n\n      alertData.show ? this.setModalVisible(true) : this.buttons[this.checkSaveBtnIdx].onPress();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      var _this5 = this;\n\n      var buttonTextStyle = [];\n\n      for (var _iterator2 = this.buttons, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[typeof Symbol === \"function\" ? Symbol.iterator : \"@@iterator\"]();;) {\n        var _ref2;\n\n        if (_isArray2) {\n          if (_i2 >= _iterator2.length) break;\n          _ref2 = _iterator2[_i2++];\n        } else {\n          _i2 = _iterator2.next();\n          if (_i2.done) break;\n          _ref2 = _i2.value;\n        }\n\n        var _button = _ref2;\n\n        var _textStyle = StyleSheet.flatten([styles.buttonText, _button.style]);\n\n        buttonTextStyle.push(_textStyle);\n      }\n\n      return React.createElement(View, {\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 214\n        }\n      }, React.createElement(Modal, _extends({}, this.props.modalProps, {\n        visible: this.state.modalVisible,\n        onRequestClose: function onRequestClose() {\n          return _this5.setModalVisible(false);\n        },\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 215\n        }\n      }), React.createElement(View, {\n        style: styles.modalContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 220\n        }\n      }, React.createElement(View, {\n        style: styles.modalView,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 221\n        }\n      }, React.createElement(Text, {\n        style: styles.titleText,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 222\n        }\n      }, this.title), this.messagesView, this.checkbox && this.renderCheckBox(), React.createElement(View, {\n        style: styles.buttonContainer,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 227\n        }\n      }, this.buttons.map(function (button, index) {\n        return React.createElement(TouchableOpacity, {\n          key: index,\n          onPress: function onPress() {\n            button.onPress();\n\n            _this5.setModalVisible(false, index);\n          },\n          style: styles.button,\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 230\n          }\n        }, React.createElement(Text, {\n          style: buttonTextStyle[index],\n          __source: {\n            fileName: _jsxFileName,\n            lineNumber: 238\n          }\n        }, button.text));\n      }))))));\n    }\n  }, {\n    key: \"renderCheckBox\",\n    value: function renderCheckBox() {\n      var _this6 = this;\n\n      return React.createElement(CheckBox, {\n        style: styles.checkBox,\n        onClick: function onClick() {\n          return _this6.setState({\n            askAlways: !_this6.state.askAlways\n          });\n        },\n        isChecked: !this.state.askAlways,\n        rightTextStyle: this.props.leftCheck ? styles.checkBoxText : null,\n        rightText: this.props.leftCheck ? this.checkText : null,\n        leftText: this.props.leftCheck ? null : this.checkText,\n        letTextStyle: this.props.leftCheck ? null : styles.checkBoxText,\n        checkedImage: this.props.checkedImage,\n        unCheckedImage: this.props.unCheckedImage,\n        checkBoxColor: this.props.checkBoxColor,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 254\n        }\n      });\n    }\n  }]);\n\n  return CheckAlert;\n}(Component);\n\nCheckAlert.propTypes = {\n  styles: PropTypes.object,\n  leftCheck: PropTypes.bool\n};\nCheckAlert.defaultProps = {\n  styles: checkAlertStyles,\n  leftCheck: true\n};\nexport { CheckAlert as default };","map":{"version":3,"sources":["C:/Users/Lucas/tcc/frontend/node_modules/react-native-awesome-alert/src/CheckAlert.js"],"names":["React","Component","CheckBox","PropTypes","AlertStorageManager","TimeManager","checkAlertStyles","styles","NEVER_ALERT_PREFIX","RANDOM_ALERT_PREFIX","CheckAlert","props","state","modalVisible","askAlways","alertsArr","checkbox","modalID","checkSaveBtnIdx","title","messagesView","buttons","checkText","invisibleTime","getObjDatasArr","then","objDatas","setState","catch","err","console","warn","message","Object","keys","forEach","key","StyleSheet","flatten","nextProps","nextState","beforeAskAlways","beforeModalVisible","isValidElement","Array","isArray","isNeverAsk","i","hasOwnProperty","id","parseInt","typeError","typeChecker","openModal","newID","alertData","parseButton","alert","show","savedTime","Date","now","saveAlert","checkAlert","visible","buttonIdx","alertStorageManager","showFalse","setModalVisible","includes","overDay","randomeTimeCheck","showTrue","onPress","buttonTextStyle","button","textStyle","buttonText","style","push","modalProps","modalContainer","modalView","titleText","renderCheckBox","buttonContainer","map","index","text","checkBox","leftCheck","checkBoxText","checkedImage","unCheckedImage","checkBoxColor","propTypes","object","bool","defaultProps"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\"\nimport CheckBox from \"react-native-check-box\"\nimport { StyleSheet, Text, View, Image, TouchableOpacity, Alert, Modal } from \"react-native\"\nimport PropTypes from \"prop-types\"\nimport AlertStorageManager from \"./AlertStorageManager\"\nimport TimeManager from \"./TimeManager\"\nimport checkAlertStyles from \"./CheckAlert.style\"\n\nconst styles = {}\nconst NEVER_ALERT_PREFIX = \"neverAskAlert:\"\nconst RANDOM_ALERT_PREFIX = \"randomAskAlert:\"\n\nexport default class CheckAlert extends Component {\n  static propTypes = {\n    styles: PropTypes.object,\n    leftCheck: PropTypes.bool\n  }\n\n  static defaultProps = {\n    styles: checkAlertStyles,\n    leftCheck: true\n  }\n\n  constructor(props) {\n    super(props)\n    this.state = {\n      modalVisible: false,\n      askAlways: true,\n      alertsArr: []\n    }\n\n    this.checkbox = true\n    this.modalID = null\n    this.checkSaveBtnIdx = null\n    this.title = \" \"\n    this.messagesView = null\n    this.buttons = []\n    this.checkText = \" \"\n    this.invisibleTime = null\n\n    new AlertStorageManager()\n      .getObjDatasArr()\n      .then(objDatas => {\n        this.setState({ alertsArr: objDatas })\n      })\n      .catch(err => console.warn(err.message))\n\n    if (this.props.styles) {\n      Object.keys(checkAlertStyles).forEach(key => {\n        styles[key] = StyleSheet.flatten([checkAlertStyles[key], this.props.styles[key]])\n      })\n    } else {\n      styles = checkAlertStyles\n    }\n  }\n\n  shouldComponentUpdate(nextProps, nextState) {\n    const beforeAskAlways = this.state.askAlways\n    const beforeModalVisible = this.state.modalVisible\n    const { askAlways, modalVisible } = nextState\n\n    if (beforeAskAlways != askAlways || beforeModalVisible != modalVisible) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  typeChecker(title, messagesView, buttons, checkText, invisibleTime) {\n    if (\n      typeof title !== \"string\" ||\n      !React.isValidElement(messagesView) ||\n      !Array.isArray(buttons) ||\n      typeof checkText !== \"string\" ||\n      typeof invisibleTime !== \"number\"\n    ) {\n      return true\n    } else {\n      return false\n    }\n  }\n\n  parseButton(buttons, isNeverAsk) {\n    // Search button's id\n    for (let i in buttons) {\n      if (buttons[i].hasOwnProperty(\"id\")) {\n        this.modalID = isNeverAsk\n          ? NEVER_ALERT_PREFIX + buttons[i].id\n          : RANDOM_ALERT_PREFIX + buttons[i].id\n        this.checkSaveBtnIdx = parseInt(i)\n        break\n      }\n    }\n  }\n\n  alert(title, messagesView, buttons) {\n    const typeError = this.typeChecker(title, messagesView, buttons, \" \", 0)\n    if (typeError) {\n      console.warn(\"TypeError, check the alert parameter\")\n      return\n    }\n\n    this.title = title\n    this.messagesView = messagesView\n    this.buttons = buttons\n    this.checkbox = false\n\n    this.openModal()\n  }\n\n  checkAlert(title, messagesView, buttons, checkText, invisibleTime, isNeverAsk) {\n    const typeError = this.typeChecker(title, messagesView, buttons, checkText, invisibleTime)\n    if (typeError) {\n      console.warn(\"TypeError, check the alert parameter\")\n      return\n    }\n\n    let newID = true\n    let alertData = null\n\n    this.parseButton(buttons, isNeverAsk)\n\n    if (this.modalID != null) {\n      this.title = title\n      this.messagesView = messagesView\n      this.buttons = buttons\n      this.checkbox = true\n      this.checkText = checkText\n      this.invisibleTime = invisibleTime\n\n      if (this.state.alertsArr != null) {\n        for (let alert of this.state.alertsArr) {\n          if (alert.id == this.modalID) {\n            newID = false\n            alertData = alert\n            break\n          }\n        }\n      }\n\n      if (newID) {\n        alertData = { id: this.modalID, show: true, savedTime: Date.now() }\n        new AlertStorageManager().saveAlert(alertData).then(() => {\n          this.openModal(alertData)\n          new AlertStorageManager()\n            .getObjDatasArr()\n            .then(objDatas => this.setState({ alertsArr: objDatas }))\n            .catch(err => console.warn(err.message))\n        })\n      } else {\n        this.openModal(alertData)\n      }\n    } else {\n      console.warn(\"you missed Alert button's ID\")\n    }\n  }\n\n  neverAskAlert(title, messagesView, buttons, checkText = \" \") {\n    this.checkAlert(title, messagesView, buttons, checkText, 0, true)\n  }\n\n  randomAskAlert(title, messagesView, buttons, checkText = \" \", invisibleTime) {\n    this.checkAlert(title, messagesView, buttons, checkText, invisibleTime, false)\n  }\n\n  setModalVisible(visible, buttonIdx = null) {\n    if (!visible && !this.state.askAlways && buttonIdx === this.checkSaveBtnIdx) {\n      const alertStorageManager = new AlertStorageManager()\n      alertStorageManager.showFalse(this.modalID, () =>\n        alertStorageManager\n          .getObjDatasArr()\n          .then(objDatas => this.setState({ alertsArr: objDatas }))\n          .catch(err => console.warn(err.message))\n      )\n    }\n    this.setState({ modalVisible: visible, askAlways: true })\n  }\n\n  openModal(alertData = null) {\n    if (alertData == null) {\n      this.setModalVisible(true)\n      return\n    }\n    if (alertData.id.includes(RANDOM_ALERT_PREFIX)) {\n      const overDay = TimeManager.randomeTimeCheck(\n        alertData.savedTime,\n        Date.now(),\n        this.invisibleTime\n      )\n      if (overDay && !alertData.show) {\n        const alertStorageManager = new AlertStorageManager()\n        alertStorageManager.showTrue(this.modalID, () =>\n          alertStorageManager\n            .getObjDatasArr()\n            .then(objDatas => this.setState({ alertsArr: objDatas }))\n            .catch(err => console.warn(err.message))\n        )\n\n        this.setModalVisible(true)\n      }\n    }\n\n    alertData.show ? this.setModalVisible(true) : this.buttons[this.checkSaveBtnIdx].onPress()\n  }\n\n  render() {\n    const buttonTextStyle = []\n    // apply button's style\n    for (let button of this.buttons) {\n      const textStyle = StyleSheet.flatten([styles.buttonText, button.style])\n      buttonTextStyle.push(textStyle)\n    }\n    return (\n      <View>\n        <Modal\n          {...this.props.modalProps}\n          visible={this.state.modalVisible}\n          onRequestClose={() => this.setModalVisible(false)}\n        >\n          <View style={styles.modalContainer}>\n            <View style={styles.modalView}>\n              <Text style={styles.titleText}>\n                {this.title}\n              </Text>\n              {this.messagesView}\n              {this.checkbox && this.renderCheckBox()}\n              <View style={styles.buttonContainer}>\n                {this.buttons.map((button, index) => {\n                  return (\n                    <TouchableOpacity\n                      key={index}\n                      onPress={() => {\n                        button.onPress()\n                        this.setModalVisible(false, index)\n                      }}\n                      style={styles.button}\n                    >\n                      <Text style={buttonTextStyle[index]}>\n                        {button.text}\n                      </Text>\n                    </TouchableOpacity>\n                  )\n                })}\n              </View>\n            </View>\n          </View>\n        </Modal>\n      </View>\n    )\n  }\n\n  renderCheckBox() {\n    return (\n      <CheckBox\n        style={styles.checkBox}\n        onClick={() => this.setState({ askAlways: !this.state.askAlways })}\n        isChecked={!this.state.askAlways}\n        rightTextStyle={this.props.leftCheck ? styles.checkBoxText : null}\n        rightText={this.props.leftCheck ? this.checkText : null}\n        leftText={this.props.leftCheck ? null : this.checkText}\n        letTextStyle={this.props.leftCheck ? null : styles.checkBoxText}\n        checkedImage={this.props.checkedImage}\n        unCheckedImage={this.props.unCheckedImage}\n        checkBoxColor={this.props.checkBoxColor}\n      />\n    )\n  }\n}\n"]},"metadata":{},"sourceType":"module"}